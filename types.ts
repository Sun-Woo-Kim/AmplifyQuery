/**
 * Store state type
 */
export type StoreState<T> = {
  items: T[]; // All items
  itemsMap: Map<string, T>; // Map for quick access by id
  lastFetched: number | null; // Last fetch time
  isLoading: boolean; // Loading state
  error: Error | null; // Error

  // Internal actions - state updates
  setItems: (items: T[]) => void;
  setItem: (item: T) => void;
  removeItem: (id: string) => void;
  setLoading: (isLoading: boolean) => void;
  setError: (error: Error | null) => void;
  resetState: () => void;
};

/**
 * Hook interface type
 */
export type ModelHook<T> = {
  items: T[]; // Array of type T
  isLoading: boolean;
  error: Error | null;
  getItem: (id: string) => T | null | undefined;
  refresh: (options?: { filter?: Record<string, any> }) => Promise<T[]>;
  create: (data: Partial<T>) => Promise<T | null>;
  update: (data: Partial<T> & { id: string }) => Promise<T | null>;
  delete: (id: string) => Promise<boolean>;
  customList: (
    queryName: string,
    args: Record<string, any>,
    options?: { forceRefresh?: boolean }
  ) => Promise<T[]>;
};

/**
 * Single item Hook interface type
 */
export type ItemHook<T> = {
  item: T | null; // Type T or null
  isLoading: boolean;
  error: Error | null;
  refresh: () => Promise<T | null>;
  update: (data: Partial<T>) => Promise<T | null>;
  delete: () => Promise<boolean>;
};

// Auth mode type definition
export type AuthMode =
  | "apiKey"
  | "iam"
  | "identityPool"
  | "oidc"
  | "userPool"
  | "lambda"
  | "none";

// Auth mode configuration options
export interface AuthOptions {
  authMode?: AuthMode;
}

/**
 * Amplify Data service type
 */
export interface AmplifyDataService<T> {
  // Basic CRUD operations
  create: (data: Partial<T>, options?: AuthOptions) => Promise<T | null>;
  createList: (
    dataList: Partial<T>[],
    options?: AuthOptions
  ) => Promise<(T | null)[]>;
  get: (
    id: string,
    options?: { forceRefresh?: boolean; authMode?: AuthMode }
  ) => Promise<T | null>;

  list: (options?: {
    filter?: Record<string, any>;
    forceRefresh?: boolean;
    authMode?: AuthMode;
  }) => Promise<T[]>;

  customList: (
    queryName: string,
    args: Record<string, any>,
    options?: { forceRefresh?: boolean; authMode?: AuthMode }
  ) => Promise<T[]>;

  update: (
    data: Partial<T> & { id: string },
    options?: AuthOptions
  ) => Promise<T | null>;
  delete: (id: string, options?: AuthOptions) => Promise<boolean>;
  deleteList: (
    ids: string[],
    options?: AuthOptions
  ) => Promise<{ success: string[]; failed: string[] }>;

  // Additional utility functions
  upsert: (
    data: Partial<T> & { id: string },
    options?: AuthOptions
  ) => Promise<T | null>;

  // Internal state management
  getStore?: () => StoreState<T>;
  loadFromCache: () => T[];
  resetCache: () => void;

  // New hook features - add initialFetchOptions and customList options
  useHook: (options?: {
    initialFetchOptions?: {
      fetch?: boolean; // Whether to execute initial fetch
      filter?: Record<string, any>; // Filter to use for initial fetch
    };
    // Change customList option type to receive queryName, args, forceRefresh
    customList?: {
      queryName: string; // Query name to use
      args: Record<string, any>; // Query arguments
      forceRefresh?: boolean; // Whether to force refresh
    };
  }) => ModelHook<T>;

  // Single item management hook
  useItemHook: (id: string) => ItemHook<T>;

  // Model name (required for singleton service)
  modelName: string;

  // Service extension method
  withExtensions: <E>(extensions: E) => AmplifyDataService<T> & E;

  // Auth mode setting
  setAuthMode: (authMode: AuthMode) => void;
  getAuthMode: () => AuthMode;

  // Add feature to set auth mode for specific operations
  withAuthMode: (authMode: AuthMode) => AmplifyDataService<T>;
}

// Singleton interface type
export interface SingletonAmplifyService<T> extends AmplifyDataService<T> {
  // Additional methods related to singleton instance
  getCurrent: (options?: { forceRefresh?: boolean }) => Promise<T | null>;
  updateCurrent: (data: Partial<T>) => Promise<T | null>;
  upsertCurrent: (data: Partial<T>) => Promise<T | null>;
}

export interface BaseModel {
  id: string;
  createdAt: string;
  updatedAt: string;
}

/**
 * GraphQL client interface
 * Compatible with clients generated by AWS Amplify's generateClient() function.
 */
export interface GraphQLClient {
  models: Record<string, any>;
  queries: Record<string, any>;
  mutations: Record<string, any>;
}

import { QueryClientConfig } from "@tanstack/react-query";

/**
 * Library configuration options
 */
export interface AmplifyQueryConfig {
  client: GraphQLClient;
  defaultAuthMode?: AuthMode;

  // Add React Query caching related options
  isCachingEnabled?: boolean;
  queryClientConfig?: QueryClientConfig;
  storage?: {
    mmkvId?: string;
    cacheKey?: string;
    maxAge?: number; // Maximum cache age in milliseconds
  };
}
