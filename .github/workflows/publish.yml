on: [push, pull_request]
name: Build, Test and maybe Publish
jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
  publish:
    name: Publish
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && ( github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' )
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # merge-release가 commit history를 분석하기 위해 전체 히스토리 필요
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: 22.x-${{ runner.OS }}-build-${{ hashFiles('package.json') }}

      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current npm version
        id: current_version
        run: |
          CURRENT_VERSION=$(npm view amplifyquery version 2>/dev/null || echo "0.0.0")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump
        id: version_bump
        run: |
          # Get commit messages since last version
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline)
          fi

          echo "Commits since last release:"
          echo "$COMMITS"

          # Determine version bump type
          if echo "$COMMITS" | grep -i "BREAKING CHANGE"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Version bump: MAJOR (breaking change detected)"
          elif echo "$COMMITS" | grep -E "^[a-f0-9]+ (feat|feature)"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Version bump: MINOR (feature detected)"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump: PATCH (bug fix or other)"
          fi

      - name: Bump version and publish
        if: steps.version_bump.outputs.bump_type
        run: |
          # Bump version
          npm version ${{ steps.version_bump.outputs.bump_type }} --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          # Commit version change
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"

          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

          # Publish to npm
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
